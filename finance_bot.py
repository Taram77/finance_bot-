import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dataclasses import dataclass
import sqlite3
from datetime import datetime, time
from typing import List, Tuple
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "8071536575:AAFgurEmQuAI3AMALnmbWM7lzODdojvQ4q8"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
class Database:
    def __init__(self, db_file):
        self.db_file = db_file

    def create_tables(self):
        try:
            conn = sqlite3.connect(self.db_file)
            cur = conn.cursor()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            cur.execute('DROP TABLE IF EXISTS transactions')
            cur.execute('DROP TABLE IF EXISTS groups')
            cur.execute('DROP TABLE IF EXISTS notification_settings')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∑–∞–Ω–æ–≤–æ
            cur.execute('''
            CREATE TABLE IF NOT EXISTS groups (
                chat_id INTEGER PRIMARY KEY,
                title TEXT,
                joined_date TIMESTAMP
            )''')

            cur.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER,
                user_id INTEGER,
                username TEXT,
                amount REAL,
                type TEXT,
                timestamp TIMESTAMP,
                FOREIGN KEY (chat_id) REFERENCES groups(chat_id)
            )''')

            cur.execute('''
            CREATE TABLE IF NOT EXISTS notification_settings (
                chat_id INTEGER PRIMARY KEY,
                notification_time TIME,
                notification_day INTEGER
            )''')
            
            conn.commit()
            conn.close()
            logging.info("Database tables created successfully")
        except Exception as e:
            logging.error(f"Error creating tables: {e}")
            if conn:
                conn.close()

    async def add_group(self, chat_id: int, title: str):
        try:
            conn = sqlite3.connect(self.db_file)
            cur = conn.cursor()
            
            cur.execute('''
            INSERT OR REPLACE INTO groups (chat_id, title, joined_date)
            VALUES (?, ?, ?)
            ''', (chat_id, title, datetime.now()))
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logging.error(f"Error adding group: {e}")
            if conn:
                conn.close()
            return False

    async def save_transaction(self, chat_id: int, amount: float, type: str, user_id: int = None, username: str = None):
        try:
            conn = sqlite3.connect(self.db_file)
            cur = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            cur.execute('SELECT chat_id FROM groups WHERE chat_id = ?', (chat_id,))
            if not cur.fetchone():
                cur.execute(
                    'INSERT INTO groups (chat_id, joined_date) VALUES (?, ?)',
                    (chat_id, datetime.now())
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            cur.execute('''
            INSERT INTO transactions (chat_id, user_id, username, amount, type, timestamp)
            VALUES (?, ?, ?, ?, ?, ?)
            ''', (chat_id, user_id, username, float(amount), type, datetime.now()))
            
            conn.commit()
            conn.close()
            logging.info(f"Transaction saved: chat_id={chat_id}, amount={amount}, type={type}")
            return True
        except Exception as e:
            logging.error(f"Error saving transaction: {e}")
            if conn:
                conn.close()
            return False

    async def get_balance(self, chat_id: int) -> float:
        try:
            conn = sqlite3.connect(self.db_file)
            cur = conn.cursor()
            
            cur.execute('''
            SELECT 
                COALESCE(
                    SUM(CASE 
                        WHEN type = 'deposit' THEN amount 
                        WHEN type = 'withdrawal' THEN -amount 
                        ELSE 0 
                    END),
                    0
                ) as balance
            FROM transactions 
            WHERE chat_id = ?
            ''', (chat_id,))
            
            result = cur.fetchone()
            balance = float(result[0]) if result else 0.0
            
            conn.close()
            return balance
        except Exception as e:
            logging.error(f"Error getting balance: {e}")
            if conn:
                conn.close()
            return 0.0

    async def get_transactions_history(self, chat_id: int) -> List[Tuple]:
        try:
            conn = sqlite3.connect(self.db_file)
            cur = conn.cursor()
            
            cur.execute('''
            SELECT 
                datetime(timestamp, 'localtime') as local_time,
                type,
                amount,
                username
            FROM transactions
            WHERE chat_id = ?
            ORDER BY timestamp DESC
            LIMIT 50
            ''', (chat_id,))
            
            history = cur.fetchall()
            conn.close()
            return history
        except Exception as e:
            logging.error(f"Error getting history: {e}")
            if conn:
                conn.close()
            return []

    async def save_notification_settings(self, chat_id: int, time_str: str = None, day: int = None):
        try:
            conn = sqlite3.connect(self.db_file)
            cur = conn.cursor()
            
            if time_str:
                cur.execute('''
                INSERT OR REPLACE INTO notification_settings (chat_id, notification_time)
                VALUES (?, ?)
                ''', (chat_id, time_str))
            
            if day:
                cur.execute('''
                INSERT OR REPLACE INTO notification_settings (chat_id, notification_day)
                VALUES (?, ?)
                ''', (chat_id, day))
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logging.error(f"Error saving notification settings: {e}")
            if conn:
                conn.close()
            return False

    async def get_notification_settings(self, chat_id: int) -> Tuple[str, int]:
        try:
            conn = sqlite3.connect(self.db_file)
            cur = conn.cursor()
            
            cur.execute('''
            SELECT notification_time, notification_day
            FROM notification_settings
            WHERE chat_id = ?
            ''', (chat_id,))
            
            result = cur.fetchone()
            conn.close()
            
            if result:
                return result
            return None, None
        except Exception as e:
            logging.error(f"Error getting notification settings: {e}")
            if conn:
                conn.close()
            return None, None

    async def get_all_notification_settings(self) -> List[Tuple]:
        try:
            conn = sqlite3.connect(self.db_file)
            cur = conn.cursor()
            
            cur.execute('''
            SELECT chat_id, notification_time, notification_day
            FROM notification_settings
            WHERE notification_time IS NOT NULL AND notification_day IS NOT NULL
            ''')
            
            settings = cur.fetchall()
            conn.close()
            return settings
        except Exception as e:
            logging.error(f"Error getting all notification settings: {e}")
            if conn:
                conn.close()
            return []
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def is_group_admin(message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã"""
    try:
        if message.chat.type in ['group', 'supergroup']:
            member = await bot.get_chat_member(message.chat.id, message.from_user.id)
            return member.is_chat_admin()
    except Exception as e:
        logging.error(f"Error checking admin rights: {e}")
    return False

async def check_group(message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–π"""
    return message.chat.type in ['group', 'supergroup']

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class PaymentState(StatesGroup):
    WAITING_FOR_AMOUNT = State()
    CONFIRMING = State()

class WithdrawalState(StatesGroup):
    WAITING_FOR_AMOUNT = State()
    CONFIRMING = State()

class SettingsState(StatesGroup):
    WAITING_FOR_NOTIFICATION_TIME = State()
    WAITING_FOR_NOTIFICATION_DAY = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üí∞ –Ø –æ–ø–ª–∞—Ç–∏–ª"))
    keyboard.add(types.KeyboardButton("üìä –ë–∞–ª–∞–Ω—Å"), types.KeyboardButton("üìù –ò—Å—Ç–æ—Ä–∏—è"))
    keyboard.add(types.KeyboardButton("üí∏ –°–ø–∏—Å–∞—Ç—å"), types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    return keyboard

def get_cancel_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_confirm_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_settings_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"))
    keyboard.add(types.KeyboardButton("üìÖ –î–µ–Ω—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"))
    keyboard.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return keyboard

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
db = Database("finance_bot.db")
scheduler = AsyncIOScheduler()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def send_notification(chat_id: int):
    try:
        balance = await db.get_balance(chat_id)
        await bot.send_message(
            chat_id,
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–Ω–µ—Å–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞!\n"
            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã: {balance:.2f} —Ä—É–±."
        )
    except Exception as e:
        logging.error(f"Error sending notification to {chat_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    try:
        if not await check_group(message):
            await message.answer(
                "‚ùå –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –≥—Ä—É–ø–ø–∞—Ö.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç."
            )
            return

        await db.add_group(
            message.chat.id,
            message.chat.title
        )
        
        await message.answer(
            "üëã –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –î–ü–ü —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!\n\n"
            "üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª' –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞\n"
            "üîπ '–ë–∞–ª–∞–Ω—Å' –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫\n"
            "üîπ '–ò—Å—Ç–æ—Ä–∏—è' –æ—Ç–æ–±—Ä–∞–∑–∏—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
            "üîπ '–°–ø–∏—Å–∞—Ç—å' –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)\n"
            "üîπ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)\n\n"
            "‚ö†Ô∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å–ø–∏—Å—ã–≤–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logging.error(f"Error in start command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")

@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    help_text = """
üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/pay - –í–Ω–µ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂
/withdraw - –°–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
/balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å
/history - –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞

üí° –°–æ–≤–µ—Ç—ã:
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
- –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
- –ü—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º
- –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫—Ç–æ –∏ –∫–æ–≥–¥–∞ –≤–Ω–æ—Å–∏–ª —Å—Ä–µ–¥—Å—Ç–≤–∞
    """
    await message.answer(help_text, reply_markup=get_main_keyboard())

@dp.message_handler(commands=['status'])
async def cmd_status(message: types.Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = sqlite3.connect("finance_bot.db")
        cur = conn.cursor()
        cur.execute("SELECT COUNT(*) FROM transactions")
        trans_count = cur.fetchone()[0]
        conn.close()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
        bot_member = await message.chat.get_member(bot.id)
        
        status_text = (
            "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
            f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω\n"
            f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞\n"
            f"üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {trans_count}\n"
            f"üë§ –ü—Ä–∞–≤–∞ –±–æ—Ç–∞: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if bot_member.is_chat_admin() else '–£—á–∞—Å—Ç–Ω–∏–∫'}\n"
        )
        
        await message.reply(status_text)
    except Exception as e:
        logging.error(f"Status check error: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞")

@dp.message_handler(commands=['reset_db'])
async def cmd_reset_db(message: types.Message):
    try:
        if not await is_group_admin(message):
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
            return
            
        db.create_tables()
        await message.answer("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        logging.error(f"Error resetting database: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

@dp.message_handler(commands=['pay'])
@dp.message_handler(text="üí∞ –Ø –æ–ø–ª–∞—Ç–∏–ª")
async def cmd_pay(message: types.Message):
    try:
        if not await check_group(message):
            await message.answer("‚ùå –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        await PaymentState.WAITING_FOR_AMOUNT.set()
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞:",
            reply_markup=get_cancel_keyboard()
        )
    except Exception as e:
        logging.error(f"Error in pay command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(state=PaymentState.WAITING_FOR_AMOUNT)
async def process_payment_amount(message: types.Message, state: FSMContext):
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.finish()
            await message.answer(
                "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=get_main_keyboard()
            )
            return

        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        await state.update_data(amount=amount)
        await PaymentState.CONFIRMING.set()
        await message.answer(
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–Ω–µ—Å–µ–Ω–∏–µ {amount:.2f} —Ä—É–±.",
            reply_markup=get_confirm_keyboard()
        )
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 100.50)"
        )
    except Exception as e:
        logging.error(f"Error processing payment amount: {e}")
        await state.finish()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

@dp.message_handler(state=PaymentState.CONFIRMING)
async def process_payment_confirm(message: types.Message, state: FSMContext):
    try:
        if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
            data = await state.get_data()
            amount = data['amount']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
            success = await db.save_transaction(
                message.chat.id,
                amount,
                "deposit",
                message.from_user.id,
                message.from_user.full_name
            )
            
            if success:
                balance = await db.get_balance(message.chat.id)
                await message.answer(
                    f"‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount:.2f} —Ä—É–±. –≤–Ω–µ—Å–µ–Ω!\n"
                    f"üë§ –í–Ω–µ—Å: {message.from_user.full_name}\n"
                    f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã: {balance:.2f} —Ä—É–±.",
                    reply_markup=get_main_keyboard()
                )
            else:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_main_keyboard()
                )
        else:
            await message.answer(
                "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=get_main_keyboard()
            )
    except Exception as e:
        logging.error(f"Error confirming payment: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
    finally:
        await state.finish()

@dp.message_handler(commands=['withdraw'])
@dp.message_handler(text="üí∏ –°–ø–∏—Å–∞—Ç—å")
async def cmd_withdraw(message: types.Message):
    try:
        if not await check_group(message):
            await message.answer("‚ùå –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        if not await is_group_admin(message):
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç —Å–ø–∏—Å—ã–≤–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞!")
            return

        await WithdrawalState.WAITING_FOR_AMOUNT.set()
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–ø–∏—Å–∞–Ω–∏—è:",
            reply_markup=get_cancel_keyboard()
        )
    except Exception as e:
        logging.error(f"Error in withdraw command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(state=WithdrawalState.WAITING_FOR_AMOUNT)
async def process_withdrawal_amount(message: types.Message, state: FSMContext):
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.finish()
            await message.answer(
                "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=get_main_keyboard()
            )
            return

        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        current_balance = await db.get_balance(message.chat.id)
        if amount > current_balance:
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {current_balance:.2f} —Ä—É–±.",
                reply_markup=get_main_keyboard()
            )
            await state.finish()
            return

        await state.update_data(amount=amount)
        await WithdrawalState.CONFIRMING.set()
        await message.answer(
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ {amount:.2f} —Ä—É–±.",
            reply_markup=get_confirm_keyboard()
        )
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 100.50)"
        )
    except Exception as e:
        logging.error(f"Error processing withdrawal amount: {e}")
        await state.finish()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

@dp.message_handler(state=WithdrawalState.CONFIRMING)
async def process_withdrawal_confirm(message: types.Message, state: FSMContext):
    try:
        if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
            data = await state.get_data()
            amount = data['amount']
            
            success = await db.save_transaction(
                message.chat.id,
                amount,
                "withdrawal",
                message.from_user.id,
                message.from_user.full_name
            )
            
            if success:
                balance = await db.get_balance(message.chat.id)
                await message.answer(
                    f"‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—É–º–º—É {amount:.2f} —Ä—É–±. –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n"
                    f"üë§ –í—ã–ø–æ–ª–Ω–∏–ª: {message.from_user.full_name}\n"
                    f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã: {balance:.2f} —Ä—É–±.",
                    reply_markup=get_main_keyboard()
                )
            else:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_main_keyboard()
                )
        else:
            await message.answer(
                "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=get_main_keyboard()
            )
    except Exception as e:
        logging.error(f"Error confirming withdrawal: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
    finally:
        await state.finish()

@dp.message_handler(commands=['balance'])
@dp.message_handler(text="üìä –ë–∞–ª–∞–Ω—Å")
async def cmd_balance(message: types.Message):
    try:
        if not await check_group(message):
            await message.answer("‚ùå –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        balance = await db.get_balance(message.chat.id)
        await message.answer(
            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã: {balance:.2f} —Ä—É–±.",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logging.error(f"Error in balance command: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
@dp.message_handler(commands=['history'])
@dp.message_handler(text="üìù –ò—Å—Ç–æ—Ä–∏—è")
async def cmd_history(message: types.Message):
    try:
        if not await check_group(message):
            await message.answer("‚ùå –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        history = await db.get_transactions_history(message.chat.id)
        
        if not history:
            await message.answer(
                "üìù –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞",
                reply_markup=get_main_keyboard()
            )
            return

        text = "üìù –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n\n"
        for timestamp, type, amount, username in history:
            operation = "‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" if type == "deposit" else "‚ûñ –°–ø–∏—Å–∞–Ω–∏–µ"
            user_info = f" –æ—Ç {username}" if username else ""
            text += f"{timestamp}: {operation}{user_info} –Ω–∞ {amount:.2f} —Ä—É–±.\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        if len(text) > 4096:
            for x in range(0, len(text), 4096):
                await message.answer(text[x:x+4096])
        else:
            await message.answer(text, reply_markup=get_main_keyboard())
    except Exception as e:
        logging.error(f"Error in history command: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

@dp.message_handler(commands=['settings'])
@dp.message_handler(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def cmd_settings(message: types.Message):
    try:
        if not await check_group(message):
            await message.answer("‚ùå –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        if not await is_group_admin(message):
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
            return

        time_str, day = await db.get_notification_settings(message.chat.id)
        settings_text = "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
        
        if time_str and day:
            settings_text += f"üïí –í—Ä–µ–º—è: {time_str}\nüìÖ –î–µ–Ω—å: {day}\n\n"
        else:
            settings_text += "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n\n"
        
        settings_text += "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
        
        await message.answer(settings_text, reply_markup=get_settings_keyboard())
    except Exception as e:
        logging.error(f"Error in settings command: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

@dp.message_handler(text="‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
async def cmd_set_notification_time(message: types.Message):
    try:
        if not await is_group_admin(message):
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
            return

        await SettingsState.WAITING_FOR_NOTIFICATION_TIME.set()
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00)",
            reply_markup=get_cancel_keyboard()
        )
    except Exception as e:
        logging.error(f"Error setting notification time: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(text="üìÖ –î–µ–Ω—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
async def cmd_set_notification_day(message: types.Message):
    try:
        if not await is_group_admin(message):
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
            return

        await SettingsState.WAITING_FOR_NOTIFICATION_DAY.set()
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (1-31)",
            reply_markup=get_cancel_keyboard()
        )
    except Exception as e:
        logging.error(f"Error setting notification day: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def cmd_back_to_menu(message: types.Message):
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )

@dp.message_handler(state=SettingsState.WAITING_FOR_NOTIFICATION_TIME)
async def process_notification_time(message: types.Message, state: FSMContext):
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.finish()
            await message.answer(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=get_settings_keyboard()
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        hours, minutes = map(int, message.text.split(':'))
        if not (0 <= hours <= 23 and 0 <= minutes <= 59):
            raise ValueError
        
        await db.save_notification_settings(message.chat.id, time_str=message.text)
        await setup_notifications()
        
        await state.finish()
        await message.answer(
            f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {message.text}",
            reply_markup=get_settings_keyboard()
        )
    except (ValueError, IndexError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00)"
        )
    except Exception as e:
        logging.error(f"Error processing notification time: {e}")
        await state.finish()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_settings_keyboard()
        )

@dp.message_handler(state=SettingsState.WAITING_FOR_NOTIFICATION_DAY)
async def process_notification_day(message: types.Message, state: FSMContext):
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.finish()
            await message.answer(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–Ω—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=get_settings_keyboard()
            )
            return

        day = int(message.text)
        if not (1 <= day <= 31):
            raise ValueError
        
        await db.save_notification_settings(message.chat.id, day=day)
        await setup_notifications()
        
        await state.finish()
        await message.answer(
            f"‚úÖ –î–µ–Ω—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {day} —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞",
            reply_markup=get_settings_keyboard()
        )
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31"
        )
    except Exception as e:
        logging.error(f"Error processing notification day: {e}")
        await state.finish()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_settings_keyboard()
        )

async def setup_notifications():
    try:
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
        scheduler.remove_all_jobs()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        settings = await db.get_all_notification_settings()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
        for chat_id, time_str, day in settings:
            if time_str and day:
                hours, minutes = map(int, time_str.split(':'))
                scheduler.add_job(
                    send_notification,
                    trigger=CronTrigger(
                        day=day,
                        hour=hours,
                        minute=minutes
                    ),
                    args=[chat_id],
                    id=f"notification_{chat_id}"
                )
        logging.info("Notifications setup completed")
    except Exception as e:
        logging.error(f"Error setting up notifications: {e}")

async def on_startup(_):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.create_tables()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await setup_notifications()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.start()
        
        logging.info("Bot started successfully")
    except Exception as e:
        logging.error(f"Startup error: {e}")
        raise e

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors_handler()
async def errors_handler(update: types.Update, exception: Exception):
    try:
        logging.error(f"Exception: {exception}")
        logging.error(f"Update: {update}")
        
        if update.message:
            await update.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    except Exception as e:
        logging.error(f"Error in error handler: {e}")
    return True

if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Windows
    try:
        if sys.platform.startswith('win'):
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    except Exception as e:
        logging.error(f"Error setting event loop policy: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(
        dp,
        on_startup=on_startup,
        skip_updates=True
    )
